diff --git a/node_modules/react-native-calendars/src/agenda/index.js b/node_modules/react-native-calendars/src/agenda/index.js
index 973e34c..d96854b 100644
--- a/node_modules/react-native-calendars/src/agenda/index.js
+++ b/node_modules/react-native-calendars/src/agenda/index.js
@@ -324,7 +324,7 @@ export default class Agenda extends Component {
         };
         return (<View testID={testID} onLayout={this.onLayout} style={[style, this.style.container]}>
         <View style={this.style.reservations}>{this.renderReservations()}</View>
-        <Animated.View style={headerStyle}>
+        {/* <Animated.View style={headerStyle}>
           <Animated.View style={[this.style.animatedContainer, { transform: [{ translateY: contentTranslate }] }]}>
             {this.renderCalendarList()}
           </Animated.View>
@@ -333,7 +333,7 @@ export default class Agenda extends Component {
         <Animated.View style={weekdaysStyle}>
           {this.renderWeekNumbersSpace()}
           {this.renderWeekDaysNames()}
-        </Animated.View>
+        </Animated.View> */}
         <Animated.ScrollView ref={this.scrollPad} style={[this.style.scrollPadStyle, scrollPadStyle]} overScrollMode="never" showsHorizontalScrollIndicator={false} showsVerticalScrollIndicator={false} scrollEventThrottle={8} scrollsToTop={false} onTouchStart={this.onTouchStart} onTouchEnd={this.onTouchEnd} onScrollBeginDrag={this.onStartDrag} onScrollEndDrag={this.onSnapAfterDrag} onScroll={Animated.event([{ nativeEvent: { contentOffset: { y: this.state.scrollY } } }], { useNativeDriver: true })}>
           <View testID={AGENDA_CALENDAR_KNOB} style={{ height: agendaHeight + KNOB_HEIGHT }} onLayout={this.onScrollPadLayout}/>
         </Animated.ScrollView>
diff --git a/node_modules/react-native-calendars/src/agenda/reservation-list/reservation.js b/node_modules/react-native-calendars/src/agenda/reservation-list/reservation.js
index bc1e2c0..47138f9 100644
--- a/node_modules/react-native-calendars/src/agenda/reservation-list/reservation.js
+++ b/node_modules/react-native-calendars/src/agenda/reservation-list/reservation.js
@@ -48,25 +48,26 @@ class Reservation extends Component {
         }
         return changed;
     }
-    renderDate() {
-        const { item, date, renderDay } = this.props;
-        if (isFunction(renderDay)) {
-            return renderDay(date, item);
-        }
-        const today = date && isToday(date) ? this.style.today : undefined;
-        const dayNames = getDefaultLocale().dayNamesShort;
-        if (date) {
-            return (<View style={this.style.day} testID={RESERVATION_DATE}>
-          <Text allowFontScaling={false} style={[this.style.dayNum, today]}>
-            {date.getDate()}
-          </Text>
-          <Text allowFontScaling={false} style={[this.style.dayText, today]}>
-            {dayNames ? dayNames[date.getDay()] : undefined}
-          </Text>
-        </View>);
-        }
-        return <View style={this.style.day}/>;
-    }
+    // Commented out renderDate because we don't want it to show in the Agenda component
+    // renderDate() {
+    //     const { item, date, renderDay } = this.props;
+    //     if (isFunction(renderDay)) {
+    //         return renderDay(date, item);
+    //     }
+    //     const today = date && isToday(date) ? this.style.today : undefined;
+    //     const dayNames = getDefaultLocale().dayNamesShort;
+    //     if (date) {
+    //         return (<View style={this.style.day} testID={RESERVATION_DATE}>
+    //       <Text allowFontScaling={false} style={[this.style.dayNum, today]}>
+    //         {date.getDate()}
+    //       </Text>
+    //       <Text allowFontScaling={false} style={[this.style.dayText, today]}>
+    //         {dayNames ? dayNames[date.getDay()] : undefined}
+    //       </Text>
+    //     </View>);
+    //     }
+    //     return <View style={this.style.day}/>;
+    // }
     render() {
         const { item, date, renderItem, renderEmptyDate } = this.props;
         let content;
@@ -80,7 +81,7 @@ class Reservation extends Component {
             content = renderEmptyDate(date);
         }
         return (<View style={this.style.container}>
-        {this.renderDate()}
+        {/* {this.renderDate()} */}
         <View style={this.style.innerContainer}>{content}</View>
       </View>);
     }
diff --git a/node_modules/react-native-calendars/src/calendar/index.js b/node_modules/react-native-calendars/src/calendar/index.js
index 6f46e8a..cf030dd 100644
--- a/node_modules/react-native-calendars/src/calendar/index.js
+++ b/node_modules/react-native-calendars/src/calendar/index.js
@@ -2,7 +2,7 @@ import PropTypes from 'prop-types';
 import XDate from 'xdate';
 import isEmpty from 'lodash/isEmpty';
 import React, { useRef, useState, useEffect, useCallback, useMemo } from 'react';
-import { View } from 'react-native';
+import { View, Text } from 'react-native';
 // @ts-expect-error
 import GestureRecognizer, { swipeDirections } from 'react-native-swipe-gestures';
 import constants from '../commons/constants';
diff --git a/node_modules/react-native-calendars/src/calendar/style.js b/node_modules/react-native-calendars/src/calendar/style.js
index 735afb5..73ba076 100644
--- a/node_modules/react-native-calendars/src/calendar/style.js
+++ b/node_modules/react-native-calendars/src/calendar/style.js
@@ -4,9 +4,9 @@ export default function getStyle(theme = {}) {
     const appStyle = { ...defaultStyle, ...theme };
     return StyleSheet.create({
         container: {
+            backgroundColor: appStyle.calendarContainerBackground,
             paddingLeft: 5,
             paddingRight: 5,
-            backgroundColor: appStyle.calendarBackground
         },
         dayContainer: {
             flex: 1,
@@ -16,7 +16,8 @@ export default function getStyle(theme = {}) {
             flex: 1
         },
         monthView: {
-            backgroundColor: appStyle.calendarBackground
+            marginTop: 2,
+            backgroundColor: appStyle.monthContainerBackground
         },
         week: {
             marginVertical: appStyle.weekVerticalMargin,
diff --git a/node_modules/react-native-calendars/src/expandableCalendar/Context/todayButton.js b/node_modules/react-native-calendars/src/expandableCalendar/Context/todayButton.js
index 80a7348..504bb6c 100644
--- a/node_modules/react-native-calendars/src/expandableCalendar/Context/todayButton.js
+++ b/node_modules/react-native-calendars/src/expandableCalendar/Context/todayButton.js
@@ -25,7 +25,7 @@ const TodayButton = (props, ref) => {
     /** Effects */
     useEffect(() => {
         if (shouldShow) {
-            setButtonIcon(getButtonIcon());
+            // setButtonIcon(getButtonIcon());
         }
         animatePosition();
     }, [state]);
@@ -48,12 +48,12 @@ const TodayButton = (props, ref) => {
     };
     const today = useRef(getFormattedLabel());
     /** Icon */
-    const getButtonIcon = () => {
-        if (shouldShow) {
-            return state === 1 ? UP_ICON : DOWN_ICON;
-        }
-    };
-    const [buttonIcon, setButtonIcon] = useState(getButtonIcon());
+    // const getButtonIcon = () => {
+    //     if (shouldShow) {
+    //         return state === 1 ? UP_ICON : DOWN_ICON;
+    //     }
+    // };
+    // const [buttonIcon, setButtonIcon] = useState(getButtonIcon());
     /** Animations */
     const buttonY = useRef(new Animated.Value(margin ? -margin : -TOP_POSITION));
     const opacity = useRef(new Animated.Value(1));
@@ -93,7 +93,7 @@ const TodayButton = (props, ref) => {
     }, [setDate]);
     return (<Animated.View style={[style.current.todayButtonContainer, { transform: [{ translateY: buttonY.current }] }]}>
       <TouchableOpacity style={[style.current.todayButton, propsStyle]} onPress={onPress} disabled={disabled}>
-        <Animated.Image style={[style.current.todayButtonImage, { opacity: opacity.current }]} source={buttonIcon}/>
+        {/* <Animated.Image style={[style.current.todayButtonImage, { opacity: opacity.current }]} source={buttonIcon}/> */}
         <Animated.Text allowFontScaling={false} style={[style.current.todayButtonText, { opacity: opacity.current }]}>
           {today.current}
         </Animated.Text>
diff --git a/node_modules/react-native-calendars/src/expandableCalendar/index.js b/node_modules/react-native-calendars/src/expandableCalendar/index.js
index 4fb12b0..2caa906 100644
--- a/node_modules/react-native-calendars/src/expandableCalendar/index.js
+++ b/node_modules/react-native-calendars/src/expandableCalendar/index.js
@@ -16,13 +16,14 @@ import WeekCalendar from './WeekCalendar';
 import Context from './Context';
 import constants from '../commons/constants';
 import { UpdateSources } from './commons';
+import MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';
 export var Positions;
 (function (Positions) {
     Positions["CLOSED"] = "closed";
     Positions["OPEN"] = "open";
 })(Positions || (Positions = {}));
-const SPEED = 20;
-const BOUNCINESS = 6;
+const SPEED = 8;
+const BOUNCINESS = 1;
 const CLOSED_HEIGHT = 120; // header + 1 week
 const WEEK_HEIGHT = 46;
 const DAY_NAMES_PADDING = 24;
@@ -59,6 +60,17 @@ const ExpandableCalendar = (props) => {
     /** CalendarList props */
     horizontal = true, calendarStyle, theme, style: propsStyle, firstDay = 0, onDayPress, hideArrows, onPressArrowLeft, onPressArrowRight, renderArrow, testID, ...others } = props;
     const [screenReaderEnabled, setScreenReaderEnabled] = useState(false);
+    /** Knob */
+    // Created this knob function to handle the toggle of the icon
+    const [knobIcon, setKnobIcon] = useState('chevron-down');
+    function toggleKnobIcon() {
+        if (isOpen) {
+            setKnobIcon('chevron-down');
+        }
+        if (!isOpen) {
+            setKnobIcon('chevron-up');
+        }
+    }
     /** Date */
     const getYear = (date) => {
         const d = new XDate(date);
@@ -236,26 +248,30 @@ const ExpandableCalendar = (props) => {
         return gestureState.dy > 5 || gestureState.dy < -5;
     };
     const handlePanResponderMove = (_, gestureState) => {
+        // REMOVED THIS FUNCTION BECAUSE WE DON'T WANT THE PAN FUNCTIONALITY WHERE THE USER NEEDS TO PULL THE CALENDAR OPEN
+        // ALSO THE PAN FEATURE DID NOT WORK WELL
         // limit min height to closed height and max to open height
-        _wrapperStyles.current.style.height = Math.min(Math.max(closedHeight, _height.current + gestureState.dy), openHeight.current);
-        if (!horizontal) {
-            // vertical CalenderList header
-            _headerStyles.style.top = Math.min(Math.max(-gestureState.dy, -HEADER_HEIGHT), 0);
-        }
-        else {
-            // horizontal Week view
-            if (!isOpen) {
-                _weekCalendarStyles.style.opacity = Math.min(1, Math.max(1 - gestureState.dy / 100, 0));
-            }
-            else if (gestureState.dy < 0) {
-                _weekCalendarStyles.style.opacity = Math.max(0, Math.min(Math.abs(gestureState.dy / 200), 1));
-            }
-        }
-        updateNativeStyles();
+        // _wrapperStyles.current.style.height = Math.min(Math.max(closedHeight, _height.current + gestureState.dy), openHeight.current);
+        // if (!horizontal) {
+        //     // vertical CalenderList header
+        //     _headerStyles.style.top = Math.min(Math.max(-gestureState.dy, -HEADER_HEIGHT), 0);
+        // }
+        // else {
+        //     // horizontal Week view
+        //     if (!isOpen) {
+        //         _weekCalendarStyles.style.opacity = Math.min(1, Math.max(1 - gestureState.dy / 100, 0));
+        //     }
+        //     else if (gestureState.dy < 0) {
+        //         _weekCalendarStyles.style.opacity = Math.max(0, Math.min(Math.abs(gestureState.dy / 200), 1));
+        //     }
+        // }
+        // updateNativeStyles();
     };
     const handlePanResponderEnd = () => {
-        _height.current = Number(_wrapperStyles.current.style.height);
-        bounceToPosition();
+        // REMOVED THIS FUNCTION BECAUSE WE DON'T WANT THE PAN FUNCTIONALITY WHERE THE USER NEEDS TO PULL THE CALENDAR OPEN
+        // ALSO THE PAN FEATURE DID NOT WORK WELL
+        // _height.current = Number(_wrapperStyles.current.style.height);
+        // bounceToPosition();
     };
     const numberOfDaysCondition = useMemo(() => {
         return !numberOfDays || numberOfDays && numberOfDays <= 1;
@@ -277,15 +293,30 @@ const ExpandableCalendar = (props) => {
             _isOpen = _height.current >= threshold; // re-check after _height.current was set
             Animated.spring(deltaY, {
                 toValue: _height.current,
-                speed: SPEED,
-                bounciness: BOUNCINESS,
+                speed: 5,
+                bounciness: 1,
                 useNativeDriver: false
+            // This is the original code. The Animated.spring doesn't run because setPosition is called too fast
+            // }).start();
+            // toggleKnobIcon();
+            // setPosition(() => _height.current === closedHeight ? Positions.CLOSED : Positions.OPEN);
+            // onCalendarToggled?.(_isOpen);
+            // closeHeader(_isOpen);
+            // resetWeekCalendarOpacity(_isOpen);
+            // }
+            // Moved setPosition into a timeout so the calendar open/close animation has time to run
+            // But it causes a bug where if a day is selected too soon after closing calendar wrong day gets selected
+                // We resolve this bug in the HomeScreen with the calClosedTimer state and a useEffect
+                    // See the done section of the todo for more information on how the bug was resolved
             }).start();
+            toggleKnobIcon();
+            setTimeout(() => {
+                setPosition(() => _height.current === closedHeight ? Positions.CLOSED : Positions.OPEN);
+            }, 500)
             onCalendarToggled?.(_isOpen);
-            setPosition(() => _height.current === closedHeight ? Positions.CLOSED : Positions.OPEN);
             closeHeader(_isOpen);
             resetWeekCalendarOpacity(_isOpen);
-        }
+            }
     };
     const resetWeekCalendarOpacity = (isOpen) => {
         _weekCalendarStyles.style.opacity = isOpen ? 0 : 1;
@@ -384,7 +415,9 @@ const ExpandableCalendar = (props) => {
     };
     const renderKnob = () => {
         return (<View style={style.current.knobContainer} pointerEvents={'box-none'}>
-        <TouchableOpacity style={style.current.knob} testID={`${testID}.knob`} onPress={toggleCalendarPosition} hitSlop={knobHitSlop} /* activeOpacity={isOpen ? undefined : 1} *//>
+        <TouchableOpacity testID={`${testID}.knob`} onPress={toggleCalendarPosition} hitSlop={knobHitSlop} /* activeOpacity={isOpen ? undefined : 1} */>
+        <MaterialCommunityIcons name={knobIcon} size={25} color='white' />
+        </TouchableOpacity>
       </View>);
     };
     const renderWeekCalendar = () => {
diff --git a/node_modules/react-native-calendars/src/expandableCalendar/style.js b/node_modules/react-native-calendars/src/expandableCalendar/style.js
index 775ff1c..dd76301 100644
--- a/node_modules/react-native-calendars/src/expandableCalendar/style.js
+++ b/node_modules/react-native-calendars/src/expandableCalendar/style.js
@@ -6,26 +6,26 @@ export const KNOB_CONTAINER_HEIGHT = 24;
 export default function styleConstructor(theme = {}) {
     const appStyle = { ...defaultStyle, ...theme };
     return StyleSheet.create({
-        containerShadow: {
-            backgroundColor: appStyle.calendarBackground,
-            ...Platform.select({
-                ios: {
-                    shadowColor: '#858F96',
-                    shadowOpacity: 0.25,
-                    shadowRadius: 10,
-                    shadowOffset: { height: 2, width: 0 },
-                    zIndex: 99
-                },
-                android: {
-                    elevation: 3
-                }
-            })
-        },
+        // containerShadow: {
+        //     backgroundColor: appStyle.calendarBackground,
+        //     ...Platform.select({
+        //         ios: {
+        //             shadowColor: '#858F96',
+        //             shadowOpacity: 0.25,
+        //             shadowRadius: 10,
+        //             shadowOffset: { height: 2, width: 0 },
+        //             zIndex: 99
+        //         },
+        //         android: {
+        //             elevation: 3
+        //         }
+        //     })
+        // },
         containerWrapper: {
             paddingBottom: 6
         },
         container: {
-            backgroundColor: appStyle.calendarBackground
+            backgroundColor: appStyle.expandableCalendarBackground
         },
         knobContainer: {
             position: 'absolute',
diff --git a/node_modules/react-native-calendars/src/style.js b/node_modules/react-native-calendars/src/style.js
index 5efb8bd..6549e4a 100644
--- a/node_modules/react-native-calendars/src/style.js
+++ b/node_modules/react-native-calendars/src/style.js
@@ -1,6 +1,6 @@
 // default values for app style (see all options for theme type in types.ts)
 const FOREGROUND_COLOR = 'white';
-const DEFAULT_TEXT_COLOR = '#2d4150';
+const DEFAULT_TEXT_COLOR = 'white';
 const SECONDARY_TEXT_COLOR = '#00BBF2';
 const AGENDA_TEXT_COLOR = '#7a92a5';
 const AGENDA_BG_COLOR = '#f2F4f5';
diff --git a/node_modules/react-native-calendars/src/types.d.ts b/node_modules/react-native-calendars/src/types.d.ts
index 9ae91c9..9ff8049 100644
--- a/node_modules/react-native-calendars/src/types.d.ts
+++ b/node_modules/react-native-calendars/src/types.d.ts
@@ -98,9 +98,9 @@ export interface Theme {
     };
 }
 export declare type AgendaEntry = {
-    name: string;
-    height: number;
     day: string;
+    data: array;
+    
 };
 export declare type AgendaSchedule = {
     [date: string]: AgendaEntry[];
@@ -109,3 +109,8 @@ export interface DayAgenda {
     reservation?: AgendaEntry;
     date?: XDate;
 }
+// date: string;
+//     amount: number;
+//     hours: number;
+//     job: string
+//     section?: string;
\ No newline at end of file
